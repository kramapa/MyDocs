 Change management and version control
=======================================

- git
    - git init
    - git add .
    - git -a commit -m "Message"
        - "-a" commits added and modified files
    - git diff (git help diff)
    - .git/info/exclude
    - git reset HEAD (unstages changes) - roll back to the HEAD
    - git reset --hard
    - git clean -n (remove untracked files)
    - git clean -f
    - git log
    - git log --oneline
    - git revert HEAD (the safe way)
    - git reset --hard <hash> (the disruptive way)
    - move
        - 1. git mv
        - 2. move files then git add -A
    - branching
        - git checkout -b input-feature (creates and switches to input-feature)
        - git branch
        - git checkout master (o reswitch to master)
        - git merge input-feature
        - git reset --hard <hash> (undo merge without fast forward)
        - git merge --no-ff input-feature
        - git commit --amend (modify last comment)
        - git branch -d input-feature (deletes the branch)
        - stashing
            - git stash save "message"
            - git stash list
            - git stash apply <name>
            - git stash drop <name>
    - tags
        - git tag 1.1 -a -m "message"
        - git tag -l
        - git reset --hard 1.1
        - git tag 1.2 1.1
        - git tag -l
        - git tag -d 1.1
    - remote repos
        - local -> remote
            - first have a local gti repo
            - create repo on github
            - git remote add origin https://<user>:<token>@github.com/<user>/<remote_repo>
            - git push -u origin master
            - git branch -a
        - local <- remote
            - git clone https://<user>:<token>@github.com/<user>/<remote_repo>
            - git fetch
            - git status
            - git branch -a
            - git merge origin/master
    - release branch
        - git tag -l (example we see 1.2 and 1.3)
        - git checkout -b release-1.4
        - git push origin release-1.4

- SmartGit (graphical interface)
- Gitflow
    - nvie.com/posts/a-successful-git-branching-model/
- public git repositories
     - github
     - unfuddle ?

- database version control
    - export the schema (from the production site)
        - pg_dump -s databasename > schema.sql (to be verified)

- modules
    - features
    - diff

- drush
    - drushmake.me
    - aliases for managing different sites
    - drush watchdog-show
    - drush watchdog-list
